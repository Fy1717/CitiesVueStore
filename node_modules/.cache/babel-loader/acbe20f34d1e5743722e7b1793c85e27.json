{"remainingRequest":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\src\\store\\store.js","dependencies":[{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\src\\store\\store.js","mtime":1619439816140},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Lenovo/OneDrive/Desktop/VueProject/onedio-project/src/store/store.js"],"names":["createStore","axios","store","state","citiesList","searchText","allCitiesApiUrl","currentCity","id","img","temperature","name","population","latitude","getters","allCities","getterSearchText","getterCurrentCity","actions","getListOfCities","getSecondRequest","urlForImage","cityObject","get","responseCity","status","data","photos","image","web","citiesListFromApi","push","commit","console","log","citiesResponse","response","geonames","map","city","geonameId","lat","toFixed","toLowerCase","setCurrentCity","urlCityName","window","location","pathname","split","slice","then","catch","errorForImage","warn","err3","mutations","SetCities","citiesListFromSearch","SetSearchKeyword","newKeyword","SetCity","newCity","SetAddCity","addingCity","existsControl","searchedList","includes"],"mappings":"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","sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nconst store = createStore({\r\n    state: {\r\n        citiesList: [],\r\n        searchText: '',\r\n        allCitiesApiUrl: 'http://api.geonames.org/citiesJSON?north=42&south=36&east=26&west=45&lang=en&username=fy1717',\r\n        currentCity: {\r\n            id: 1,\r\n            img: 'https://d13k13wj6adfdf.cloudfront.net/urban_areas/rome_web-30e1610428.jpg',\r\n            temperature: 'default',\r\n            name: 'default',\r\n            population: 'default',\r\n            latitude: 'default'\r\n        }\r\n    },\r\n    getters: {\r\n        allCities: (state) => state.citiesList,\r\n        getterSearchText: (state) => state.searchText,\r\n        getterCurrentCity: (state) => state.currentCity,\r\n    },\r\n    actions: {\r\n        async getListOfCities({ state, commit }) {\r\n            var citiesListFromApi = [];\r\n            var citiesResponse = [];\r\n            var cityObject = {};\r\n\r\n            async function getSecondRequest(urlForImage, cityObject) {\r\n                try {\r\n                    var responseCity = await axios.get(urlForImage);\r\n\r\n                    if (responseCity.status === 200) {\r\n                        cityObject.img = ((((responseCity.data || {}).photos || [])[0] || {}).image || {}).web || '';\r\n                        citiesListFromApi.push(cityObject);\r\n                        commit('SetAddCity', cityObject);\r\n                    }\r\n                } catch (err2) {\r\n                    commit('SetAddCity', cityObject);\r\n                    console.log(err2);\r\n                }\r\n            }\r\n\r\n            try {\r\n                var response = await axios.get(state.allCitiesApiUrl);\r\n            \r\n                citiesResponse = ((response || {}).data || {}).geonames || [];\r\n                    cityObject = {};\r\n            \r\n                    citiesResponse.map(city => {\r\n                        cityObject = {\r\n                            id: city.geonameId || 0,\r\n                            name: city.name || '',\r\n                            population: city.population || 0, \r\n                            latitude: (city.lat || 0).toFixed(3),\r\n                            temperature: '25',\r\n                            img: 'https://d13k13wj6adfdf.cloudfront.net/urban_areas/baku_web-71bcbddb43.jpg'\r\n                        };\r\n                        \r\n                        if (cityObject.name) {\r\n                            var urlForImage = 'https://api.teleport.org/api/urban_areas/slug:' + city.name.toLowerCase() + '/images/';\r\n                            \r\n                            getSecondRequest(urlForImage, cityObject);\r\n                        }\r\n                    });\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }, \r\n        async setCurrentCity({ state, commit }, urlCityName) {\r\n            if(!urlCityName) {\r\n                urlCityName = window.location.pathname.split('/').slice(-1)[0];\r\n            }\r\n\r\n            state.citiesList.map(city => {\r\n                if (city.name === urlCityName) {\r\n                    var urlForImage = 'https://api.teleport.org/api/urban_areas/slug:' + city.name.toLowerCase() + '/images/';\r\n                    \r\n                    try {\r\n                        axios.get(urlForImage)\r\n                            .then(responseCity => {\r\n                                if(responseCity.status === 200) {\r\n                                    city.img = ((((responseCity.data || {}).photos || [])[0] || {}).image || {}).web || city.img;\r\n                                }\r\n                            }). catch(errorForImage => {\r\n                                console.warn(errorForImage);\r\n                            });\r\n\r\n                        commit('SetCity', city);\r\n                    } catch (err3) {\r\n                        console.log(err3);\r\n                    }\r\n                    \r\n                }\r\n            });\r\n        },\r\n        /* getListOfCitiesFromSearch({ state, commit }) {\r\n            var searchedList = [];\r\n\r\n            state.citiesList.map(city => {\r\n                if (city.name.toLowerCase().includes(state.searchText.toLowerCase())) {\r\n                    searchedList.push(city);\r\n                }  \r\n            });\r\n\r\n            commit('SetCities', searchedList)\r\n        } */\r\n    },\r\n    mutations: {\r\n        SetCities(state, citiesListFromSearch) {            \r\n            state.citiesList = citiesListFromSearch;\r\n        },\r\n        SetSearchKeyword(state, newKeyword) {\r\n            state.searchText = newKeyword;\r\n        },\r\n        SetCity(state, newCity) {\r\n            state.currentCity = newCity;\r\n        },\r\n        SetAddCity(state, addingCity) {\r\n            var existsControl = true;\r\n            var searchedList = [];\r\n\r\n            state.citiesList.map(city => {\r\n                if (addingCity.name === city.name) {\r\n                    existsControl = false;\r\n                }  \r\n            });\r\n\r\n            if (existsControl) {\r\n                state.citiesList.push(addingCity);\r\n            }\r\n\r\n            state.citiesList.map(city => {\r\n                if (city.name.toLowerCase().includes(state.searchText.toLowerCase())) {\r\n                    searchedList.push(city);\r\n                }  \r\n            });\r\n\r\n            state.citiesList = searchedList;\r\n        }\r\n    },\r\n})\r\n\r\nexport default store"]}]}