{"remainingRequest":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\src\\store\\store.js","dependencies":[{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\src\\store\\store.js","mtime":1619392076873},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Lenovo\\OneDrive\\Desktop\\VueProject\\onedio-project\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0xlbm92by9PbmVEcml2ZS9EZXNrdG9wL1Z1ZVByb2plY3Qvb25lZGlvLXByb2plY3Qvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwp2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZSh7CiAgc3RhdGU6IHsKICAgIGNpdGllc0xpc3Q6IFtdLAogICAgc2VhcmNoVGV4dDogJycsCiAgICBhbGxDaXRpZXNBcGlVcmw6ICdodHRwOi8vYXBpLmdlb25hbWVzLm9yZy9jaXRpZXNKU09OP25vcnRoPTQyJnNvdXRoPTM2JmVhc3Q9MjYmd2VzdD00NSZsYW5nPWVuJnVzZXJuYW1lPWZ5MTcxNycsCiAgICBjdXJyZW50Q2l0eTogewogICAgICBpZDogMSwKICAgICAgaW1nOiAnaHR0cHM6Ly9kMTNrMTN3ajZhZGZkZi5jbG91ZGZyb250Lm5ldC91cmJhbl9hcmVhcy9yb21lX3dlYi0zMGUxNjEwNDI4LmpwZycsCiAgICAgIHRlbXBlcmF0dXJlOiAnZGVmYXVsdCcsCiAgICAgIG5hbWU6ICdkZWZhdWx0JywKICAgICAgcG9wdWxhdGlvbjogJ2RlZmF1bHQnLAogICAgICBsYXRpdHVkZTogJ2RlZmF1bHQnCiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBhbGxDaXRpZXM6IGZ1bmN0aW9uIGFsbENpdGllcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY2l0aWVzTGlzdDsKICAgIH0sCiAgICBnZXR0ZXJTZWFyY2hUZXh0OiBmdW5jdGlvbiBnZXR0ZXJTZWFyY2hUZXh0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5zZWFyY2hUZXh0OwogICAgfSwKICAgIGdldHRlckN1cnJlbnRDaXR5OiBmdW5jdGlvbiBnZXR0ZXJDdXJyZW50Q2l0eShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY3VycmVudENpdHk7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBnZXRMaXN0T2ZDaXRpZXM6IGZ1bmN0aW9uIGdldExpc3RPZkNpdGllcyhfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIGNpdGllc0xpc3RGcm9tQXBpLCBjaXRpZXNSZXNwb25zZSwgY2l0eU9iamVjdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGUsIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgY2l0aWVzTGlzdEZyb21BcGkgPSBbXTsKICAgICAgICAgICAgICAgIGNpdGllc1Jlc3BvbnNlID0gW107CiAgICAgICAgICAgICAgICBjaXR5T2JqZWN0ID0ge307CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoc3RhdGUuYWxsQ2l0aWVzQXBpVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBjaXRpZXNSZXNwb25zZSA9ICgocmVzcG9uc2UgfHwge30pLmRhdGEgfHwge30pLmdlb25hbWVzIHx8IFtdOwogICAgICAgICAgICAgICAgICBjaXR5T2JqZWN0ID0ge307CiAgICAgICAgICAgICAgICAgIGNpdGllc1Jlc3BvbnNlLm1hcChmdW5jdGlvbiAoY2l0eSkgewogICAgICAgICAgICAgICAgICAgIGNpdHlPYmplY3QgPSB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogY2l0eS5nZW9uYW1lSWQgfHwgMCwKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGNpdHkubmFtZSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRpb246IGNpdHkucG9wdWxhdGlvbiB8fCAwLAogICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGU6IChjaXR5LmxhdCB8fCAwKS50b0ZpeGVkKDMpLAogICAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6ICcyNScsCiAgICAgICAgICAgICAgICAgICAgICBpbWc6ICdodHRwczovL2ltYWdlLmFycml2YWxndWlkZXMuY29tLzE1MDB4NjAwLzA5L2FhYWZlMmFjZGRkM2Y1N2IxOGUzNGY4MzgyZDk3MjFiLmpwZycKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICBpZiAoY2l0eU9iamVjdC5uYW1lICYmIGNpdHkubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHN0YXRlLnNlYXJjaFRleHQudG9Mb3dlckNhc2UoKSkpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmxGb3JJbWFnZSA9ICdodHRwczovL2FwaS50ZWxlcG9ydC5vcmcvYXBpL3VyYmFuX2FyZWFzL3NsdWc6JyArIGNpdHkubmFtZS50b0xvd2VyQ2FzZSgpICsgJy9pbWFnZXMvJzsKICAgICAgICAgICAgICAgICAgICAgIGF4aW9zLmdldCh1cmxGb3JJbWFnZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VDaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUNpdHkuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5T2JqZWN0LmltZyA9ICgoKChyZXNwb25zZUNpdHkuZGF0YSB8fCB7fSkucGhvdG9zIHx8IFtdKVswXSB8fCB7fSkuaW1hZ2UgfHwge30pLndlYiB8fCBjaXR5T2JqZWN0LmltZzsgLy9jb25zb2xlLmxvZyhjaXR5T2JqZWN0LmltZykKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yRm9ySW1hZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yRm9ySW1hZ2UpOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBjaXRpZXNMaXN0RnJvbUFwaS5wdXNoKGNpdHlPYmplY3QpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7IC8vY29uc29sZS5sb2coJ0FDVElPTlMgT04gU1RPUkUgLS0+ICcsIGNpdGllc0xpc3RGcm9tQXBpKTsgCiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnU2V0Q2l0aWVzJywgY2l0aWVzTGlzdEZyb21BcGkpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2V0Q3VycmVudENpdHk6IGZ1bmN0aW9uIHNldEN1cnJlbnRDaXR5KF9yZWYyLCB1cmxDaXR5TmFtZSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZSwgY29tbWl0ID0gX3JlZjIuY29tbWl0OwoKICAgICAgICAgICAgICAgIGlmICghdXJsQ2l0eU5hbWUpIHsKICAgICAgICAgICAgICAgICAgdXJsQ2l0eU5hbWUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKS5zbGljZSgtMSlbMF07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3RhdGUuY2l0aWVzTGlzdC5tYXAoZnVuY3Rpb24gKGNpdHkpIHsKICAgICAgICAgICAgICAgICAgaWYgKGNpdHkubmFtZSA9PT0gdXJsQ2l0eU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsRm9ySW1hZ2UgPSAnaHR0cHM6Ly9hcGkudGVsZXBvcnQub3JnL2FwaS91cmJhbl9hcmVhcy9zbHVnOicgKyBjaXR5Lm5hbWUudG9Mb3dlckNhc2UoKSArICcvaW1hZ2VzLyc7CiAgICAgICAgICAgICAgICAgICAgYXhpb3MuZ2V0KHVybEZvckltYWdlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZUNpdHkpIHsKICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUNpdHkuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2l0eS5pbWcgPSAoKCgocmVzcG9uc2VDaXR5LmRhdGEgfHwge30pLnBob3RvcyB8fCBbXSlbMF0gfHwge30pLmltYWdlIHx8IHt9KS53ZWIgfHwgY2l0eS5pbWc7IC8vY29uc29sZS5sb2coY2l0eU9iamVjdC5pbWcpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yRm9ySW1hZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvckZvckltYWdlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ1NldENpdHknLCBjaXR5KTsgLy9jb25zb2xlLmxvZygnbmV3IGNpdHkgLS0+ICcsIGNpdHkpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIFNldENpdGllczogZnVuY3Rpb24gU2V0Q2l0aWVzKHN0YXRlLCBjaXRpZXNMaXN0RnJvbUFwaSkgewogICAgICBzdGF0ZS5jaXRpZXNMaXN0ID0gY2l0aWVzTGlzdEZyb21BcGk7CiAgICB9LAogICAgU2V0U2VhcmNoS2V5d29yZDogZnVuY3Rpb24gU2V0U2VhcmNoS2V5d29yZChzdGF0ZSwgbmV3S2V5d29yZCkgewogICAgICBzdGF0ZS5zZWFyY2hUZXh0ID0gbmV3S2V5d29yZDsKICAgIH0sCiAgICBTZXRDaXR5OiBmdW5jdGlvbiBTZXRDaXR5KHN0YXRlLCBuZXdDaXR5KSB7CiAgICAgIHN0YXRlLmN1cnJlbnRDaXR5ID0gbmV3Q2l0eTsKICAgIH0KICB9Cn0pOwpleHBvcnQgZGVmYXVsdCBzdG9yZTs="},{"version":3,"sources":["C:/Users/Lenovo/OneDrive/Desktop/VueProject/onedio-project/src/store/store.js"],"names":["createStore","axios","store","state","citiesList","searchText","allCitiesApiUrl","currentCity","id","img","temperature","name","population","latitude","getters","allCities","getterSearchText","getterCurrentCity","actions","getListOfCities","commit","citiesListFromApi","citiesResponse","cityObject","get","then","response","data","geonames","map","city","geonameId","lat","toFixed","toLowerCase","includes","urlForImage","responseCity","status","photos","image","web","catch","errorForImage","console","warn","push","error","log","setCurrentCity","urlCityName","window","location","pathname","split","slice","mutations","SetCities","SetSearchKeyword","newKeyword","SetCity","newCity"],"mappings":"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","sourcesContent":["import { createStore } from 'vuex';\r\nimport axios from 'axios';\r\n\r\nconst store = createStore({\r\n    state: {\r\n        citiesList: [],\r\n        searchText: '',\r\n        allCitiesApiUrl: 'http://api.geonames.org/citiesJSON?north=42&south=36&east=26&west=45&lang=en&username=fy1717',\r\n        currentCity: {\r\n            id: 1,\r\n            img: 'https://d13k13wj6adfdf.cloudfront.net/urban_areas/rome_web-30e1610428.jpg',\r\n            temperature: 'default',\r\n            name: 'default',\r\n            population: 'default',\r\n            latitude: 'default'\r\n        }\r\n    },\r\n    getters: {\r\n        allCities: (state) => state.citiesList,\r\n        getterSearchText: (state) => state.searchText,\r\n        getterCurrentCity: (state) => state.currentCity,\r\n    },\r\n    actions: {\r\n        async getListOfCities({ state, commit }) {\r\n            var citiesListFromApi = [];\r\n            var citiesResponse = [];\r\n            var cityObject = {};\r\n\r\n            await axios.get(state.allCitiesApiUrl)\r\n                .then(response => {\r\n                    citiesResponse = ((response || {}).data || {}).geonames || [];\r\n                    cityObject = {};\r\n            \r\n                    citiesResponse.map((city) => {\r\n                        cityObject = {\r\n                            id: city.geonameId || 0,\r\n                            name: city.name || '',\r\n                            population: city.population || 0, \r\n                            latitude: (city.lat || 0).toFixed(3),\r\n                            temperature: '25',\r\n                            img: 'https://image.arrivalguides.com/1500x600/09/aaafe2acddd3f57b18e34f8382d9721b.jpg'\r\n                        };\r\n                        \r\n                        if (cityObject.name && city.name.toLowerCase().includes(state.searchText.toLowerCase())) {\r\n                            var urlForImage = 'https://api.teleport.org/api/urban_areas/slug:' + city.name.toLowerCase() + '/images/';\r\n                            \r\n                            axios.get(urlForImage)\r\n                                .then(responseCity => {\r\n                                    if(responseCity.status === 200) {\r\n                                        cityObject.img = ((((responseCity.data || {}).photos || [])[0] || {}).image || {}).web || cityObject.img;\r\n                                        //console.log(cityObject.img)\r\n                                    }\r\n                                }). catch(errorForImage => {\r\n                                    console.warn(errorForImage);\r\n                                });\r\n\r\n                            citiesListFromApi.push(cityObject);\r\n                        }\r\n                    });\r\n            \r\n                    //console.log('ACTIONS ON STORE --> ', citiesListFromApi); \r\n                }).catch (error => {\r\n                    console.log(error);\r\n                }); \r\n            \r\n            commit('SetCities', citiesListFromApi)\r\n        }, \r\n        async setCurrentCity({ state, commit }, urlCityName) {\r\n            if(!urlCityName) {\r\n                urlCityName = window.location.pathname.split('/').slice(-1)[0];\r\n            }\r\n\r\n            state.citiesList.map((city) => {\r\n                if (city.name === urlCityName) {\r\n                    var urlForImage = 'https://api.teleport.org/api/urban_areas/slug:' + city.name.toLowerCase() + '/images/';\r\n                    \r\n                    axios.get(urlForImage)\r\n                        .then(responseCity => {\r\n                            if(responseCity.status === 200) {\r\n                                city.img = ((((responseCity.data || {}).photos || [])[0] || {}).image || {}).web || city.img;\r\n                                //console.log(cityObject.img)\r\n                            }\r\n                        }). catch(errorForImage => {\r\n                            console.warn(errorForImage);\r\n                        });\r\n\r\n                    commit('SetCity', city);\r\n\r\n                    //console.log('new city --> ', city);\r\n                }\r\n            });\r\n        } \r\n    },\r\n    mutations: {\r\n        SetCities(state, citiesListFromApi) {\r\n            state.citiesList = citiesListFromApi;\r\n        },\r\n        SetSearchKeyword(state, newKeyword) {\r\n            state.searchText = newKeyword;\r\n        },\r\n        SetCity(state, newCity) {\r\n            state.currentCity = newCity;\r\n        }\r\n    },\r\n})\r\n\r\nexport default store"]}]}